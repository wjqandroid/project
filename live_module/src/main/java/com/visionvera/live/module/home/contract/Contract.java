package com.visionvera.live.module.home.contract;import android.content.Context;import com.trello.rxlifecycle2.LifecycleProvider;import com.visionvera.live.base.bean.ResBean;import com.visionvera.live.base.mvp.IBaseModel;import com.visionvera.live.base.mvp.IBasePresenter;import com.visionvera.live.base.mvp.IBaseView;import com.visionvera.live.module.home.bean.AddChatterBean;import com.visionvera.live.module.home.bean.ChannelBean;import com.visionvera.live.module.home.bean.ChatMessageBean;import com.visionvera.live.module.home.bean.CourseBean;import com.visionvera.live.module.home.bean.ExpertBean;import com.visionvera.live.module.home.bean.GroupChatterBean;import com.visionvera.live.module.home.bean.GroupIdBean;import com.visionvera.live.module.home.bean.MettingScheduleBean;import java.util.List;import java.util.Map;import io.reactivex.Observer;import okhttp3.RequestBody;/** * @Desc 课程首页MVP约束类 * @Author yemh * @Date 2019/4/15 17:30 */public interface Contract {    /**     * 课程分类     */    interface IChannel {        interface IModel extends IBaseModel {            void channelResult(Map<String, String> params, LifecycleProvider provider, Observer<ResBean<List<ChannelBean>>> observer);        }        interface IView extends IBaseView {            void showChannelResult(ResBean<List<ChannelBean>> bean, IBaseView.ResultType resultType);        }        interface IPresenter extends IBasePresenter {            void getChannel(Context context, Map<String, String> params, LifecycleProvider provider);        }    }    /**     * 轮播图     */    interface IBanner {        interface IModel extends IBaseModel {            void bannerResult(Map<String, String> params, LifecycleProvider provider, Observer<ResBean<List<CourseBean>>> observer);        }        interface IView extends IBaseView {            void showBannerResult(ResBean<List<CourseBean>> bean, IBaseView.ResultType resultType);        }        interface IPresenter extends IBasePresenter {            void getBanner(Context context, Map<String, String> params, LifecycleProvider provider);        }    }    /**     * 课程     */    interface ILive {        interface IModel extends IBaseModel {            void getSourceResult(RequestBody params, LifecycleProvider provider, Observer<ResBean<List<CourseBean>>> observer);        }        interface IView extends IBaseView {            void showSourceResult(ResBean<List<CourseBean>> bean);        }        interface IPresenter extends IBasePresenter {            void getSource(Context context, RequestBody params, LifecycleProvider provider);        }    }    /**     * im相关     */    interface IIm {        interface IModel extends IBaseModel {            void getGroupByBusinessIdResult(Map<String, Integer> params, LifecycleProvider provider, Observer<ResBean<GroupIdBean>> observer);            void addChatterResult(RequestBody params, LifecycleProvider provider, Observer<ResBean<AddChatterBean>> observer);            void getHistoryMessageResult(String url, RequestBody params, LifecycleProvider provider, Observer<ResBean<List<ChatMessageBean>>> observer);            void getGroupChatterResult(RequestBody params, LifecycleProvider provider, Observer<ResBean<List<GroupChatterBean>>> observer);        }        interface IView extends IBaseView {            void showGroupByBusinessIdResult(ResBean<GroupIdBean> bean);            void showAddChatterResult(ResBean<AddChatterBean> bean);            void showHistoryMessageResult(ResBean<List<ChatMessageBean>> bean);            void showGroupChatterResult(ResBean<List<GroupChatterBean>> bean);        }        interface IPresenter extends IBasePresenter {            void getGroupByBusinessId(Context context, Map<String, Integer> params, LifecycleProvider provider);            void addChatter(Context context, RequestBody params, LifecycleProvider provider);            void getHistoryMessage(Context context, String url, RequestBody params, LifecycleProvider provider);            void getGroupChatter(Context context, RequestBody params, LifecycleProvider provider);        }    }    /**     * im签名     */    interface IUserSign {        interface IModel extends IBaseModel {            void getUserSignResult(Map<String, Integer> params, LifecycleProvider provider, Observer<ResBean<String>> observer);        }        interface IView extends IBaseView {            void showUserSignResult(ResBean<String> bean);        }        interface IPresenter extends IBasePresenter {            void getUserSign(Context context, Map<String, Integer> params, LifecycleProvider provider);        }    }    /**     * 日程安排     */    interface IMettingSchedule {        interface IModel extends IBaseModel {            void getMettingScheduleResult(Map<String, String> params, LifecycleProvider provider, Observer<ResBean<List<MettingScheduleBean>>> observer);        }        interface IView extends IBaseView {            void showMettingScheduleResult(ResBean<List<MettingScheduleBean>> bean);        }        interface IPresenter extends IBasePresenter {            void getMettingSchedule(Context context, Map<String, String> params, LifecycleProvider provider);        }    }    /**     * 专家简介     */    interface IExpertIntroduction {        interface IModel extends IBaseModel {            void expertIntroductionResult(Map<String, String> params, LifecycleProvider provider, Observer<ResBean<ExpertBean>> observer);        }        interface IView extends IBaseView {            void showexpertIntroductionResult(ResBean<ExpertBean> bean);        }        interface IPresenter extends IBasePresenter {            void getExpertIntroduction(Context context, Map<String, String> params, LifecycleProvider provider);        }    }}