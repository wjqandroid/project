import java.text.SimpleDateFormat

apply plugin: 'com.jakewharton.butterknife'
//控制lib模式或app模式
def isApplication = rootProject.ext.isEvalutionApplication
if (isApplication) {
    apply plugin: 'com.android.application'
} else {
apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

//apply plugin: 'com.tencent.android.tpns'//tpns集成插件
//apply plugin: 'com.huawei.agconnect'
// 应用 com.sensorsdata.analytics.android 插件
//apply plugin: 'com.sensorsdata.analytics.android'
//获取打包的时间
def releaseTime() {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd-HH-mm");
    String s = sdf.format(new Date())
    return s
}

android {
    androidExtensions {
        experimental = true
    }
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildFeatures {
        //启动viewbinding.主要用来代替butterknife
        //注意:viewbinding不能为include引入的布局自动生成代码.所以需要的话可以自己finviewbyid或只用butterknife
        viewBinding = true
    }

    dataBinding {
        enabled = true
    }

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }

//        manifestPlaceholders = [qqappid: "101570201"]

        ndk {
            //可以根据需要来自行选择并添加对应cpu类型的.so库。
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86_64'
//            abiFilters "armeabi-v7a"/*,"armeabi", "arm64-v8a", "x86", "x86_64"*/
        }

        dexOptions {
            javaMaxHeapSize "4g"
        }

    }

    signingConfigs {
        release {
            keyAlias 'medical'
            keyPassword '123456'
            storeFile file('../keys/medical.keystore')
            storePassword '123456'
        }
    }


    buildTypes {
        release {
            minifyEnabled false  //是否开启混淆
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField 'boolean', 'LOG', 'false'
        }
        debug {
            signingConfig signingConfigs.release
            buildConfigField 'boolean', 'LOG', 'true'
        }
    }
    if (isApplication) {

        flavorDimensions "default"
        productFlavors {
            urlDevelop { //开发地址

            }
            urlTest { //测试环境

            }
            urlYanshi_Tx {//演示环境 腾讯云

            }
            urlFormat {//正式环境

            }
        }

    }

    //jdk1.8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main {
            if (isApplication) {
                manifest.srcFile 'src/main/java/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
            jniLibs.srcDirs = ['libs']
        }
    }

    //修改生成的apk名字
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if ("release".equals(variant.buildType.name)) {
                def finalApkName = "粤心安_v${defaultConfig.versionName}_${releaseTime()}.apk"
                outputFileName = finalApkName
            }
        }
    }

    //添加如下配置
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'MissingTranslation'
    }

    //让studio提示程序员加前缀
    //resourcePrefix 只能限定Xml资源，并不能限定图片资源，图片资源扔需要自身注意设置前缀名
//    resourcePrefix "${project.name}_"



}


dependencies {
    implementation fileTree(include: ['*.aar', '*.jar'], exclude: [], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.2.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation project(path: ':base_module')

    //友盟推送，PushSDK必须依赖基础组件库，所以需要加入对应依赖
    implementation files('libs/umeng-common-2.0.2.jar')
//    api 'com.umeng.umsdk:utdid:1.1.5.3'
    implementation 'com.umeng.umsdk:push:6.0.1'
    implementation files('libs/umeng-share-core-6.9.4.jar')
    implementation files('libs/umeng-share-QQ-simplify-6.9.4.jar')
    implementation files('libs/umeng-share-wechat-simplify-6.9.4.jar')
    implementation files('libs/umeng-sharetool-6.9.4.jar')
    implementation files('libs/umeng-share-sina-full-6.9.8.jar')
    //百度定位sdk
    implementation files('libs/BaiduLBS_Android.jar')

//    implementation(name:'base_module-urlFormat-debug', ext:'aar')

    /*  if (isApplication) {
        //如果独立运行,依赖登录模块,保证功能正常
        if (!rootProject.ext.isAccountApplication) {
            runtimeOnly project(path: ':account_module')
        }
        if (!rootProject.ext.isLiveApplication){
            runtimeOnly project(path: ':live_module')
        }
    }*/
    annotationProcessor 'com.alibaba:arouter-compiler:1.2.2'
    implementation 'com.alibaba:arouter-api:1.5.0'
    kapt 'com.alibaba:arouter-compiler:1.2.2'
    kapt 'com.jakewharton:butterknife-compiler:10.2.1'

    api project(":visionvera_zst-release")
    implementation project(path: ':live_module')
    implementation project(path: ':account_module')
    implementation project(path: ':ucrop')
    implementation project(path: ':imagepicker')
    implementation project(path: ':source')//腾讯音视频
    implementation project(path: ':TUICore')//腾讯音视频
    implementation project(path: ':tuichat')//腾讯IM   图文聊天
    implementation project(path: ':tuicontact')//腾讯IM 图文字聊天
    /*▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽*/
    //   地址：https://github.com/LtLei/RxCache
    //RxCache使用LruCache和DiskLruCache对网络请求数据进行二级缓存，主要适配于接口API返回数据，不用于图片等的缓存。
    // 可以设置缓存模式、缓存大小，设置数据过期时间，并提供了根据key删除缓存和清空所有缓存的功能。提供了Gson方式和Serialize方式进行数据存储转换与还原。
    api 'com.github.LtLei:RxCache:1.0.5'
    /*△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△*/
    /*▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽*/
    //地址：https://github.com/JeremyLiao/LiveEventBus
    //EventBus for Android，消息总线，基于LiveData，具有生命周期感知能力，支持Sticky，支持AndroidX，支持跨进程，支持跨APP
    api 'com.jeremyliao:live-event-bus-x:1.7.2'
    /*△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△△*/
    //https://github.com/barteksc/AndroidPdfViewer
    //pdf 加载PDF文件   本地、网络
    api 'com.github.barteksc:android-pdf-viewer:2.8.0'
    // TPNS SDK 主工程依赖包
//    implementation 'com.tencent.tpns:tpns:1.3.1.1-release'
    // 华为推送
//    implementation 'com.tencent.tpns:huawei:1.2.7.1-release'
//    implementation 'com.huawei.hms:push:6.1.0.300'
//    // 小米
//    implementation "com.tencent.tpns:xiaomi:1.3.1.1-release"
//    // 魅族
//    implementation "com.tencent.tpns:meizu:1.3.1.1-release"
//    // OPPO
//    implementation "com.tencent.tpns:oppo:1.3.1.1-release"
//    // vivo
//    implementation "com.tencent.tpns:vivo:1.3.1.1-release"
    implementation "org.jetbrains.kotlin:kotlin-android-extensions-runtime:$kotlin_version"

}






