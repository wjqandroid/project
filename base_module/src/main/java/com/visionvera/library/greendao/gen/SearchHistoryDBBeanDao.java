package com.visionvera.library.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.visionvera.library.greendao.SearchHistoryDBBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEARCH_HISTORY_DBBEAN".
*/
public class SearchHistoryDBBeanDao extends AbstractDao<SearchHistoryDBBean, Long> {

    public static final String TABLENAME = "SEARCH_HISTORY_DBBEAN";

    /**
     * Properties of entity SearchHistoryDBBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DiscoverId = new Property(1, int.class, "discoverId", false, "DISCOVER_ID");
        public final static Property DiscoverValue = new Property(2, String.class, "discoverValue", false, "DISCOVER_VALUE");
    }


    public SearchHistoryDBBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SearchHistoryDBBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEARCH_HISTORY_DBBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DISCOVER_ID\" INTEGER NOT NULL ," + // 1: discoverId
                "\"DISCOVER_VALUE\" TEXT);"); // 2: discoverValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEARCH_HISTORY_DBBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SearchHistoryDBBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDiscoverId());
 
        String discoverValue = entity.getDiscoverValue();
        if (discoverValue != null) {
            stmt.bindString(3, discoverValue);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SearchHistoryDBBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDiscoverId());
 
        String discoverValue = entity.getDiscoverValue();
        if (discoverValue != null) {
            stmt.bindString(3, discoverValue);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SearchHistoryDBBean readEntity(Cursor cursor, int offset) {
        SearchHistoryDBBean entity = new SearchHistoryDBBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // discoverId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // discoverValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SearchHistoryDBBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDiscoverId(cursor.getInt(offset + 1));
        entity.setDiscoverValue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SearchHistoryDBBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SearchHistoryDBBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SearchHistoryDBBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
